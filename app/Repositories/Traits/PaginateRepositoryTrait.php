<?php

/*
 * This file is originally part of Laravel Credentials.
 *
 * (c) Graham Campbell <graham@mineuk.com>
 *
 * For the full copyright and license information, please view the licenses/Bootstrap-CMS-Credentials-License
 * file that was distributed with this source code.
 */

namespace Starter\Repositories\Traits;

use Illuminate\Pagination\LengthAwarePaginator;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * This is the paginate repository trait.
 *
 * @author Graham Campbell <graham@mineuk.com>
 */
trait PaginateRepositoryTrait
{
    /**
     * The paginated links generated by the paginate method.
     *
     * @var string
     */
    protected $paginateLinks;

    protected $index;

    /**
     * Get a paginated list of the models.
     *
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     *
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function paginate()
    {
        $model = $this->getModel();

        if (property_exists($model, 'order')) {
            $paginator = $model::orderBy($model::$order, $model::$sort)->with($this->with)->paginate($model->getPerPage(), $model::$index);
        } else {
            $paginator = $model::paginate($model->getPerPage(), $model::$index)->with($this->with);
        }

        if (!$this->isPageInRange($paginator) && !$this->isFirstPage($paginator)) {
            throw new NotFoundHttpException();
        }

        if (count($paginator)) {
            $this->paginateLinks = $paginator->render();
        }

        return $paginator;
    }

    /**
     * Is this current page in range?
     *
     * @param \Illuminate\Pagination\LengthAwarePaginator $paginator
     *
     * @return bool
     */
    protected function isPageInRange(LengthAwarePaginator $paginator)
    {
        return ($paginator->currentPage() <= ceil($paginator->lastItem()/$paginator->perPage()));
    }

    /**
     * Is the current page the first page?
     *
     * @param \Illuminate\Pagination\Paginator $paginator
     *
     * @return bool
     */
    protected function isFirstPage(Paginator $paginator)
    {
        return ($paginator->currentPage() === 1);
    }

    /**
     * Get the paginated links.
     *
     * @return string
     */
    public function links()
    {
        return $this->paginateLinks;
    }
}